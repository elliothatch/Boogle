<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PS7</name>
    </assembly>
    <members>
        <member name="T:CustomNetworking.StringSocket">
             <summary> 
             A StringSocket is a wrapper around a Socket.  It provides methods that
             asynchronously read lines of text (strings terminated by newlines) and 
             write strings. (As opposed to Sockets, which read and write raw bytes.)  
            
             StringSockets are thread safe.  This means that two or more threads may
             invoke methods on a shared StringSocket without restriction.  The
             StringSocket takes care of the synchonization.
             
             Each StringSocket contains a Socket object that is provided by the client.  
             A StringSocket will work properly only if the client refrains from calling
             the contained Socket's read and write methods.
             
             If we have an open Socket s, we can create a StringSocket by doing
             
                StringSocket ss = new StringSocket(s, new UTF8Encoding());
             
             We can write a string to the StringSocket by doing
             
                ss.BeginSend("Hello world", callback, payload);
                
             where callback is a SendCallback (see below) and payload is an arbitrary object.
             This is a non-blocking, asynchronous operation.  When the StringSocket has 
             successfully written the string to the underlying Socket, or failed in the 
             attempt, it invokes the callback.  The parameters to the callback are a
             (possibly null) Exception and the payload.  If the Exception is non-null, it is
             the Exception that caused the send attempt to fail.
             
             We can read a string from the StringSocket by doing
             
                 ss.BeginReceive(callback, payload)
                 
             where callback is a ReceiveCallback (see below) and payload is an arbitrary object.
             This is non-blocking, asynchronous operation.  When the StringSocket has read a
             string of text terminated by a newline character from the underlying Socket, or
             failed in the attempt, it invokes the callback.  The parameters to the callback are
             a (possibly null) string, a (possibly null) Exception, and the payload.  Either the
             string or the Exception will be non-null, but nor both.  If the string is non-null, 
             it is the requested string (with the newline removed).  If the Exception is non-null, 
             it is the Exception that caused the send attempt to fail.
             </summary>
        </member>
        <member name="M:CustomNetworking.StringSocket.#ctor(System.Net.Sockets.Socket,System.Text.Encoding)">
            <summary>
            Creates a StringSocket from a regular Socket, which should already be connected.  
            The read and write methods of the regular Socket must not be called after the
            LineSocket is created.  Otherwise, the StringSocket will not behave properly.  
            The encoding to use to convert between raw bytes and strings is also provided.
            </summary>
        </member>
        <member name="M:CustomNetworking.StringSocket.BeginSend(System.String,CustomNetworking.StringSocket.SendCallback,System.Object)">
            <summary>
            We can write a string to a StringSocket ss by doing
            
               ss.BeginSend("Hello world", callback, payload);
               
            where callback is a SendCallback (see below) and payload is an arbitrary object.
            This is a non-blocking, asynchronous operation.  When the StringSocket has 
            successfully written the string to the underlying Socket, or failed in the 
            attempt, it invokes the callback.  The parameters to the callback are a
            (possibly null) Exception and the payload.  If the Exception is non-null, it is
            the Exception that caused the send attempt to fail. 
            
            This method is non-blocking.  This means that it does not wait until the string
            has been sent before returning.  Instead, it arranges for the string to be sent
            and then returns.  When the send is completed (at some time in the future), the
            callback is called on another thread.
            
            This method is thread safe.  This means that multiple threads can call BeginSend
            on a shared socket without worrying around synchronization.  The implementation of
            BeginSend must take care of synchronization instead.  On a given StringSocket, each
            string arriving via a BeginSend method call must be sent (in its entirety) before
            a later arriving string can be sent.
            </summary>
        </member>
        <member name="M:CustomNetworking.StringSocket.sendCallback(System.IAsyncResult)">
            <summary>
            Private callback function for the socket.BeginSend function.
            This function checks if all the data the user requested to be sent is sent. 
            If not, socket.BeginSend is called on the remaining data and an event loop is formed until all of the data is sent.
            </summary>
            <param name="ar">State Data</param>
        </member>
        <member name="M:CustomNetworking.StringSocket.BeginReceive(CustomNetworking.StringSocket.ReceiveCallback,System.Object)">
            <summary>
            
            <para>
            We can read a string from the StringSocket by doing
            </para>
            
            <para>
                ss.BeginReceive(callback, payload)
            </para>
            
            <para>
            where callback is a ReceiveCallback (see below) and payload is an arbitrary object.
            This is non-blocking, asynchronous operation.  When the StringSocket has read a
            string of text terminated by a newline character from the underlying Socket, or
            failed in the attempt, it invokes the callback.  The parameters to the callback are
            a (possibly null) string, a (possibly null) Exception, and the payload.  Either the
            string or the Exception will be non-null, but nor both.  If the string is non-null, 
            it is the requested string (with the newline removed).  If the Exception is non-null, 
            it is the Exception that caused the send attempt to fail.
            </para>
            
            <para>
            This method is non-blocking.  This means that it does not wait until a line of text
            has been received before returning.  Instead, it arranges for a line to be received
            and then returns.  When the line is actually received (at some time in the future), the
            callback is called on another thread.
            </para>
            
            <para>
            This method is thread safe.  This means that multiple threads can call BeginReceive
            on a shared socket without worrying around synchronization.  The implementation of
            BeginReceive must take care of synchronization instead.  On a given StringSocket, each
            arriving line of text must be passed to callbacks in the order in which the corresponding
            BeginReceive call arrived.
            </para>
            
            <para>
            Note that it is possible for there to be incoming bytes arriving at the underlying Socket
            even when there are no pending callbacks.  StringSocket implementations should refrain
            from buffering an unbounded number of incoming bytes beyond what is required to service
            the pending callbacks.        
            </para>
            
            <param name="callback"> The function to call upon receiving the data</param>
            <param name="payload"> 
            The payload is "remembered" so that when the callback is invoked, it can be associated
            with a specific Begin Receiver....
            </param>  
            
            <example>
              Here is how you might use this code:
              <code>
                               client = new TcpClient("localhost", port);
                               Socket       clientSocket = client.Client;
                               StringSocket receiveSocket = new StringSocket(clientSocket, new UTF8Encoding());
                               receiveSocket.BeginReceive(CompletedReceive1, 1);
            
              </code>
            </example>
            </summary>
            
            
        </member>
        <member name="M:CustomNetworking.StringSocket.receiveCallback(System.IAsyncResult)">
            <summary>
            Private callback function for the socket.BeginReceive function.
            When this function is called the socket has received data and here it is processed for newlines and if the socket has been closed.
            If the socket received more data than the user requested, it is stored in the unrequeuestedStringQueue to be sent out at a later time when the user requests it.
            </summary>
            <param name="ar">State Data</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:CustomNetworking.StringSocket.Close" -->
        <member name="T:CustomNetworking.StringSocket.SendData">
            <summary>
            Private SendData class that is used for queueing up data that the user requests to send.
            Contains all the three properties of a send request, the bytes, callback, and payload.
            When the SendData is dequeued from the sendQueue, it is send to the socket to be sent and its callback is called.
            </summary>
        </member>
        <member name="M:CustomNetworking.StringSocket.SendData.#ctor(System.Byte[],CustomNetworking.StringSocket.SendCallback,System.Object)">
            <summary>
            Constructor that stores the send request's parameters.
            </summary>
            <param name="buffer">List of bytes to be sent</param>
            <param name="callback">Callback function to be called upon completion</param>
            <param name="payload">Payload identifier of the callback</param>
        </member>
        <member name="T:CustomNetworking.StringSocket.ReceiveData">
            <summary>
            Private ReveiveData class that is used for queueing up data that the user requests to receive.
            Contains the two properties of a send request, the callback and payload.
            When the ReceiveData is dequeued from the receiveQueue, the callback is called with the payload and bytes received.
            </summary>
        </member>
        <member name="M:CustomNetworking.StringSocket.ReceiveData.#ctor(CustomNetworking.StringSocket.ReceiveCallback,System.Object)">
            <summary>
            Constructor that stores the receive request's parameters.
            </summary>
            <param name="callback">Callback function to be called upon completion</param>
            <param name="payload">Payload identifier of the callback</param>
        </member>
    </members>
</doc>
